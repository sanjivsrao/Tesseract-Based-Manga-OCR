# -*- coding: utf-8 -*-
"""CV Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KHKv0uj3Chc2fLnO7mFEHs4Kk88KvuX8
"""

#pip install pytesseract
#pip install pillow
#pip install paddlepaddle
#pip install paddleocr
#apt install tesseract-ocr
import cv2
import os
import numpy as np
from PIL import Image
import pytesseract
from paddleocr import PaddleOCR, draw_ocr
from pytesseract import image_to_string
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')
import os
os.chdir('/content/drive/My Drive/Colab Notebooks/CV/')
pytesseract.pytesseract.tesseract_cmd = r'/usr/bin/tesseract'

input_folder = "YuGiOh_train"
output_folder = "YuGiOh_train_processed"
test_file = "/content/drive/MyDrive/Colab Notebooks/CV/YuGiOh_train_processed/Yu-Gi-Oh! - c001 (v01) - p015 [VIZ] [Digital] [Shellshock].jpg"

os.makedirs(output_folder, exist_ok=True)

from nltk.translate.nist_score import sentence_nist

def preprocess_images(input_folder, output_folder):
    for filename in os.listdir(input_folder):
        if filename.endswith((".png", ".jpg", ".jpeg")):
            img_path = os.path.join(input_folder, filename)
            img = cv2.imread(img_path)
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            resized = cv2.resize(gray, (800, 1200))
            output_path = os.path.join(output_folder, filename)
            cv2.imwrite(output_path, resized)

#preprocess_images(input_folder, output_folder) #executed once

def detect_text_bubbles(image_path):
    image = cv2.imread(image_path)
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    blur = cv2.GaussianBlur(gray, (3, 3), 0)
    binary_image = cv2.threshold(blur, 235, 255, cv2.THRESH_BINARY)[1]
    contours, _ = cv2.findContours(binary_image, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    cropped_bubbles = []
    contour_image = image.copy()
    for contour in contours:
        x, y, w, h = cv2.boundingRect(contour)
        if 60 < w < 400 and 25 < h < 500:
            cv2.rectangle(contour_image, (x, y), (x + w, y + h), (0, 255, 0), 2)
            cropped_bubbles.append(image[y:y+h, x:x+w])

    plt.figure(figsize=(12, 6))
    plt.subplot(1, 2, 1)
    plt.title("Original Image with Contours")
    plt.imshow(cv2.cvtColor(contour_image, cv2.COLOR_BGR2RGB))
    plt.axis("off")
    plt.subplot(1, 2, 2)
    plt.title("Binary Thresholded Image")
    plt.imshow(binary_image, cmap="gray")
    plt.axis("off")
    plt.tight_layout()
    plt.show()
    return cropped_bubbles

def extract_text_tesseract(cropped_bubbles):
    bubble_texts = []
    for bubble in cropped_bubbles:
        text = pytesseract.image_to_string(bubble)
        bubble_texts.append(text.strip())

    concatenated_text = " ".join(bubble_texts)
    return concatenated_text

ocr = PaddleOCR(use_angle_cls=True, lang='en')
def extract_text_paddle_ocr(image_path):
    result = ocr.ocr(image_path, cls=True)
    extracted_text = []
    for idx in range(len(result)):
      res = result[idx]
      for line in res:
          print(line)
    result = result[0]
    image = Image.open(image_path).convert('RGB')
    boxes = [line[0] for line in result]
    txts = [line[1][0] for line in result]
    scores = [line[1][1] for line in result]
    im_show = draw_ocr(image, boxes, txts, scores, font_path='/content/drive/MyDrive/Colab Notebooks/CV/simfang.ttf')
    im_show = Image.fromarray(im_show)
    im_show.save('result.jpg')

def benchmark_with_paddle_ocr(image_path):
    result = ocr.ocr(image_path, cls=True)
    extracted_text = []
    for res in result:
        if res:
            if len(res)>0:
                for line in res:
                    extracted_text.append(line[1][0])
    formatted_text = "\n".join(extracted_text)

    return formatted_text

def calculate_nist_score(reference_text, generated_text):
    reference = [reference_text.split()]
    candidate = generated_text.split()
    print("Reference:", reference)
    print("Candidate:", candidate)
    try:
        score = sentence_nist(reference, candidate)
    except ZeroDivisionError:
        score = 0.0
    return score

#Citations
#https://paddlepaddle.github.io/PaddleOCR/main/en/quick_start.html#use-by-code
#https://www.geeksforgeeks.org/text-detection-and-extraction-using-opencv-and-ocr/
#https://largecats.github.io/blog/2019/06/20/ocr-with-comics/
#https://github.com/AsiriAmalk/Comic_Speech_Bubble_Identifier_Using_Pytesseract

def compute_nist(input_folder):
    results = {}
    nist_scores = []
    total_nist_score = 0
    file_count = 0

    for filename in os.listdir(input_folder):
        image_path = os.path.join(input_folder, filename)
        print(f"Processing file: {image_path}")

        paddle_text = benchmark_with_paddle_ocr(image_path)
        extracted_bubbles = detect_text_bubbles(image_path)
        tesseract_text = extract_text_tesseract(extracted_bubbles)
        nist_score = calculate_nist_score(paddle_text, tesseract_text)

        results[filename] = nist_score
        nist_scores.append(nist_score)
        total_nist_score += nist_score
        file_count += 1
        print(f"File: {filename}, NIST Score: {nist_score}")

    average_nist_score = total_nist_score / file_count if file_count > 0 else 0
    median_nist_score = np.median(nist_scores)
    std_dev_nist_score = np.std(nist_scores)

    print(f"Average NIST Score: {average_nist_score}")
    print(f"Median NIST Score: {median_nist_score}")
    print(f"Standard Deviation of NIST Scores: {std_dev_nist_score}")

    plt.figure(figsize=(10, 6))
    plt.bar(results.keys(), nist_scores, color='skyblue')
    plt.title('NIST Scores for Each Image')
    plt.xlabel('Image Filename')
    plt.ylabel('NIST Score')
    plt.xticks(rotation=90)
    plt.tight_layout()
    plt.show()

    return results, average_nist_score, median_nist_score, std_dev_nist_score

results = compute_nist("/content/drive/MyDrive/Colab Notebooks/CV/YuGiOh_train_processed")